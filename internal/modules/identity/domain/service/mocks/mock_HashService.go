// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockHashService is an autogenerated mock type for the HashService type
type MockHashService struct {
	mock.Mock
}

type MockHashService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHashService) EXPECT() *MockHashService_Expecter {
	return &MockHashService_Expecter{mock: &_m.Mock}
}

// CompareHashAndPassword provides a mock function with given fields: hashedPassword, password
func (_m *MockHashService) CompareHashAndPassword(hashedPassword []byte, password []byte) error {
	ret := _m.Called(hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for CompareHashAndPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, []byte) error); ok {
		r0 = rf(hashedPassword, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHashService_CompareHashAndPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareHashAndPassword'
type MockHashService_CompareHashAndPassword_Call struct {
	*mock.Call
}

// CompareHashAndPassword is a helper method to define mock.On call
//   - hashedPassword []byte
//   - password []byte
func (_e *MockHashService_Expecter) CompareHashAndPassword(hashedPassword interface{}, password interface{}) *MockHashService_CompareHashAndPassword_Call {
	return &MockHashService_CompareHashAndPassword_Call{Call: _e.mock.On("CompareHashAndPassword", hashedPassword, password)}
}

func (_c *MockHashService_CompareHashAndPassword_Call) Run(run func(hashedPassword []byte, password []byte)) *MockHashService_CompareHashAndPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockHashService_CompareHashAndPassword_Call) Return(_a0 error) *MockHashService_CompareHashAndPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHashService_CompareHashAndPassword_Call) RunAndReturn(run func([]byte, []byte) error) *MockHashService_CompareHashAndPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateFromPassword provides a mock function with given fields: password
func (_m *MockHashService) GenerateFromPassword(password []byte) ([]byte, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for GenerateFromPassword")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHashService_GenerateFromPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateFromPassword'
type MockHashService_GenerateFromPassword_Call struct {
	*mock.Call
}

// GenerateFromPassword is a helper method to define mock.On call
//   - password []byte
func (_e *MockHashService_Expecter) GenerateFromPassword(password interface{}) *MockHashService_GenerateFromPassword_Call {
	return &MockHashService_GenerateFromPassword_Call{Call: _e.mock.On("GenerateFromPassword", password)}
}

func (_c *MockHashService_GenerateFromPassword_Call) Run(run func(password []byte)) *MockHashService_GenerateFromPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockHashService_GenerateFromPassword_Call) Return(_a0 []byte, _a1 error) *MockHashService_GenerateFromPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHashService_GenerateFromPassword_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockHashService_GenerateFromPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRandomBytes provides a mock function with no fields
func (_m *MockHashService) GenerateRandomBytes() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHashService_GenerateRandomBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomBytes'
type MockHashService_GenerateRandomBytes_Call struct {
	*mock.Call
}

// GenerateRandomBytes is a helper method to define mock.On call
func (_e *MockHashService_Expecter) GenerateRandomBytes() *MockHashService_GenerateRandomBytes_Call {
	return &MockHashService_GenerateRandomBytes_Call{Call: _e.mock.On("GenerateRandomBytes")}
}

func (_c *MockHashService_GenerateRandomBytes_Call) Run(run func()) *MockHashService_GenerateRandomBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHashService_GenerateRandomBytes_Call) Return(_a0 []byte, _a1 error) *MockHashService_GenerateRandomBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHashService_GenerateRandomBytes_Call) RunAndReturn(run func() ([]byte, error)) *MockHashService_GenerateRandomBytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHashService creates a new instance of MockHashService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHashService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHashService {
	mock := &MockHashService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
