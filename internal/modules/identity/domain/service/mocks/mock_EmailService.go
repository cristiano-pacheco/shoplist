// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/cristiano-pacheco/shoplist/internal/modules/identity/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// MockEmailService is an autogenerated mock type for the EmailService type
type MockEmailService struct {
	mock.Mock
}

type MockEmailService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEmailService) EXPECT() *MockEmailService_Expecter {
	return &MockEmailService_Expecter{mock: &_m.Mock}
}

// SendAccountConfirmationEmail provides a mock function with given fields: user, token
func (_m *MockEmailService) SendAccountConfirmationEmail(user model.UserModel, token string) error {
	ret := _m.Called(user, token)

	if len(ret) == 0 {
		panic("no return value specified for SendAccountConfirmationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(model.UserModel, string) error); ok {
		r0 = rf(user, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEmailService_SendAccountConfirmationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAccountConfirmationEmail'
type MockEmailService_SendAccountConfirmationEmail_Call struct {
	*mock.Call
}

// SendAccountConfirmationEmail is a helper method to define mock.On call
//   - user model.UserModel
//   - token string
func (_e *MockEmailService_Expecter) SendAccountConfirmationEmail(user interface{}, token interface{}) *MockEmailService_SendAccountConfirmationEmail_Call {
	return &MockEmailService_SendAccountConfirmationEmail_Call{Call: _e.mock.On("SendAccountConfirmationEmail", user, token)}
}

func (_c *MockEmailService_SendAccountConfirmationEmail_Call) Run(run func(user model.UserModel, token string)) *MockEmailService_SendAccountConfirmationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UserModel), args[1].(string))
	})
	return _c
}

func (_c *MockEmailService_SendAccountConfirmationEmail_Call) Return(_a0 error) *MockEmailService_SendAccountConfirmationEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEmailService_SendAccountConfirmationEmail_Call) RunAndReturn(run func(model.UserModel, string) error) *MockEmailService_SendAccountConfirmationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEmailService creates a new instance of MockEmailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEmailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEmailService {
	mock := &MockEmailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
