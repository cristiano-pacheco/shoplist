// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cristiano-pacheco/go-modulith/internal/shared/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepositoryI is an autogenerated mock type for the UserRepositoryI type
type MockUserRepositoryI struct {
	mock.Mock
}

type MockUserRepositoryI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepositoryI) EXPECT() *MockUserRepositoryI_Expecter {
	return &MockUserRepositoryI_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockUserRepositoryI) Create(ctx context.Context, _a1 model.UserModel) (*model.UserModel, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) (*model.UserModel, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) *model.UserModel); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.UserModel) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryI_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserRepositoryI_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.UserModel
func (_e *MockUserRepositoryI_Expecter) Create(ctx interface{}, _a1 interface{}) *MockUserRepositoryI_Create_Call {
	return &MockUserRepositoryI_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockUserRepositoryI_Create_Call) Run(run func(ctx context.Context, _a1 model.UserModel)) *MockUserRepositoryI_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserModel))
	})
	return _c
}

func (_c *MockUserRepositoryI_Create_Call) Return(_a0 *model.UserModel, _a1 error) *MockUserRepositoryI_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryI_Create_Call) RunAndReturn(run func(context.Context, model.UserModel) (*model.UserModel, error)) *MockUserRepositoryI_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByID provides a mock function with given fields: ctx, ID
func (_m *MockUserRepositoryI) FindOneByID(ctx context.Context, ID uint64) (*model.UserModel, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByID")
	}

	var r0 *model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.UserModel, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.UserModel); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryI_FindOneByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByID'
type MockUserRepositoryI_FindOneByID_Call struct {
	*mock.Call
}

// FindOneByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uint64
func (_e *MockUserRepositoryI_Expecter) FindOneByID(ctx interface{}, ID interface{}) *MockUserRepositoryI_FindOneByID_Call {
	return &MockUserRepositoryI_FindOneByID_Call{Call: _e.mock.On("FindOneByID", ctx, ID)}
}

func (_c *MockUserRepositoryI_FindOneByID_Call) Run(run func(ctx context.Context, ID uint64)) *MockUserRepositoryI_FindOneByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockUserRepositoryI_FindOneByID_Call) Return(_a0 *model.UserModel, _a1 error) *MockUserRepositoryI_FindOneByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryI_FindOneByID_Call) RunAndReturn(run func(context.Context, uint64) (*model.UserModel, error)) *MockUserRepositoryI_FindOneByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *MockUserRepositoryI) Update(ctx context.Context, _a1 model.UserModel) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.UserModel) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryI_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserRepositoryI_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.UserModel
func (_e *MockUserRepositoryI_Expecter) Update(ctx interface{}, _a1 interface{}) *MockUserRepositoryI_Update_Call {
	return &MockUserRepositoryI_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *MockUserRepositoryI_Update_Call) Run(run func(ctx context.Context, _a1 model.UserModel)) *MockUserRepositoryI_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserModel))
	})
	return _c
}

func (_c *MockUserRepositoryI_Update_Call) Return(_a0 error) *MockUserRepositoryI_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryI_Update_Call) RunAndReturn(run func(context.Context, model.UserModel) error) *MockUserRepositoryI_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepositoryI creates a new instance of MockUserRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepositoryI {
	mock := &MockUserRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
