// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/cristiano-pacheco/go-modulith/internal/module/billing/model"
	repository "github.com/cristiano-pacheco/go-modulith/internal/module/billing/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockCategoryRepositoryI is an autogenerated mock type for the CategoryRepositoryI type
type MockCategoryRepositoryI struct {
	mock.Mock
}

type MockCategoryRepositoryI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCategoryRepositoryI) EXPECT() *MockCategoryRepositoryI_Expecter {
	return &MockCategoryRepositoryI_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, _a1
func (_m *MockCategoryRepositoryI) Create(ctx context.Context, _a1 model.CategoryModel) (*model.CategoryModel, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.CategoryModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CategoryModel) (*model.CategoryModel, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CategoryModel) *model.CategoryModel); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CategoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CategoryModel) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryRepositoryI_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCategoryRepositoryI_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.CategoryModel
func (_e *MockCategoryRepositoryI_Expecter) Create(ctx interface{}, _a1 interface{}) *MockCategoryRepositoryI_Create_Call {
	return &MockCategoryRepositoryI_Create_Call{Call: _e.mock.On("Create", ctx, _a1)}
}

func (_c *MockCategoryRepositoryI_Create_Call) Run(run func(ctx context.Context, _a1 model.CategoryModel)) *MockCategoryRepositoryI_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CategoryModel))
	})
	return _c
}

func (_c *MockCategoryRepositoryI_Create_Call) Return(_a0 *model.CategoryModel, _a1 error) *MockCategoryRepositoryI_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryRepositoryI_Create_Call) RunAndReturn(run func(context.Context, model.CategoryModel) (*model.CategoryModel, error)) *MockCategoryRepositoryI_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, _a1
func (_m *MockCategoryRepositoryI) Delete(ctx context.Context, _a1 model.CategoryModel) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CategoryModel) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCategoryRepositoryI_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCategoryRepositoryI_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.CategoryModel
func (_e *MockCategoryRepositoryI_Expecter) Delete(ctx interface{}, _a1 interface{}) *MockCategoryRepositoryI_Delete_Call {
	return &MockCategoryRepositoryI_Delete_Call{Call: _e.mock.On("Delete", ctx, _a1)}
}

func (_c *MockCategoryRepositoryI_Delete_Call) Run(run func(ctx context.Context, _a1 model.CategoryModel)) *MockCategoryRepositoryI_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CategoryModel))
	})
	return _c
}

func (_c *MockCategoryRepositoryI_Delete_Call) Return(_a0 error) *MockCategoryRepositoryI_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepositoryI_Delete_Call) RunAndReturn(run func(context.Context, model.CategoryModel) error) *MockCategoryRepositoryI_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindList provides a mock function with given fields: ctx, filters
func (_m *MockCategoryRepositoryI) FindList(ctx context.Context, filters repository.CategorySearchFilters) []*model.CategoryModel {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for FindList")
	}

	var r0 []*model.CategoryModel
	if rf, ok := ret.Get(0).(func(context.Context, repository.CategorySearchFilters) []*model.CategoryModel); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CategoryModel)
		}
	}

	return r0
}

// MockCategoryRepositoryI_FindList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindList'
type MockCategoryRepositoryI_FindList_Call struct {
	*mock.Call
}

// FindList is a helper method to define mock.On call
//   - ctx context.Context
//   - filters repository.CategorySearchFilters
func (_e *MockCategoryRepositoryI_Expecter) FindList(ctx interface{}, filters interface{}) *MockCategoryRepositoryI_FindList_Call {
	return &MockCategoryRepositoryI_FindList_Call{Call: _e.mock.On("FindList", ctx, filters)}
}

func (_c *MockCategoryRepositoryI_FindList_Call) Run(run func(ctx context.Context, filters repository.CategorySearchFilters)) *MockCategoryRepositoryI_FindList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CategorySearchFilters))
	})
	return _c
}

func (_c *MockCategoryRepositoryI_FindList_Call) Return(_a0 []*model.CategoryModel) *MockCategoryRepositoryI_FindList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCategoryRepositoryI_FindList_Call) RunAndReturn(run func(context.Context, repository.CategorySearchFilters) []*model.CategoryModel) *MockCategoryRepositoryI_FindList_Call {
	_c.Call.Return(run)
	return _c
}

// FindOneByID provides a mock function with given fields: ctx, ID
func (_m *MockCategoryRepositoryI) FindOneByID(ctx context.Context, ID uint64) (*model.CategoryModel, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByID")
	}

	var r0 *model.CategoryModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*model.CategoryModel, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *model.CategoryModel); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CategoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryRepositoryI_FindOneByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOneByID'
type MockCategoryRepositoryI_FindOneByID_Call struct {
	*mock.Call
}

// FindOneByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uint64
func (_e *MockCategoryRepositoryI_Expecter) FindOneByID(ctx interface{}, ID interface{}) *MockCategoryRepositoryI_FindOneByID_Call {
	return &MockCategoryRepositoryI_FindOneByID_Call{Call: _e.mock.On("FindOneByID", ctx, ID)}
}

func (_c *MockCategoryRepositoryI_FindOneByID_Call) Run(run func(ctx context.Context, ID uint64)) *MockCategoryRepositoryI_FindOneByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockCategoryRepositoryI_FindOneByID_Call) Return(_a0 *model.CategoryModel, _a1 error) *MockCategoryRepositoryI_FindOneByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryRepositoryI_FindOneByID_Call) RunAndReturn(run func(context.Context, uint64) (*model.CategoryModel, error)) *MockCategoryRepositoryI_FindOneByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *MockCategoryRepositoryI) Update(ctx context.Context, _a1 model.CategoryModel) (*model.CategoryModel, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.CategoryModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CategoryModel) (*model.CategoryModel, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CategoryModel) *model.CategoryModel); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CategoryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CategoryModel) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCategoryRepositoryI_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCategoryRepositoryI_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.CategoryModel
func (_e *MockCategoryRepositoryI_Expecter) Update(ctx interface{}, _a1 interface{}) *MockCategoryRepositoryI_Update_Call {
	return &MockCategoryRepositoryI_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *MockCategoryRepositoryI_Update_Call) Run(run func(ctx context.Context, _a1 model.CategoryModel)) *MockCategoryRepositoryI_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CategoryModel))
	})
	return _c
}

func (_c *MockCategoryRepositoryI_Update_Call) Return(_a0 *model.CategoryModel, _a1 error) *MockCategoryRepositoryI_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCategoryRepositoryI_Update_Call) RunAndReturn(run func(context.Context, model.CategoryModel) (*model.CategoryModel, error)) *MockCategoryRepositoryI_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCategoryRepositoryI creates a new instance of MockCategoryRepositoryI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCategoryRepositoryI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCategoryRepositoryI {
	mock := &MockCategoryRepositoryI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
