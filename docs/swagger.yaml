basePath: /
definitions:
  dto.ActivateUserRequest:
    properties:
      token:
        type: string
      user_id:
        type: integer
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.CreateUserResponse:
    properties:
      email:
        type: string
      name:
        type: string
      user_id:
        type: integer
    type: object
  dto.FindUserResponse:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  dto.GenerateTokenRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.GenerateTokenResponse:
    properties:
      token:
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      name:
        type: string
      password:
        type: string
    type: object
  errs.Error:
    properties:
      error:
        $ref: '#/definitions/errs.er'
    type: object
  errs.detail:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  errs.er:
    properties:
      code:
        type: string
      details:
        items:
          $ref: '#/definitions/errs.detail'
        type: array
      message:
        type: string
    type: object
  response.Data-dto_CreateUserResponse:
    properties:
      data:
        $ref: '#/definitions/dto.CreateUserResponse'
    type: object
  response.Data-dto_FindUserResponse:
    properties:
      data:
        $ref: '#/definitions/dto.FindUserResponse'
    type: object
  response.Data-dto_GenerateTokenResponse:
    properties:
      data:
        $ref: '#/definitions/dto.GenerateTokenResponse'
    type: object
info:
  contact: {}
  description: Go modulith API
  title: Go modulith API
  version: "1.0"
paths:
  /api/v1/auth/token:
    post:
      consumes:
      - application/json
      description: Authenticates user credentials and returns an access token
      parameters:
      - description: Login credentials (email and password)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GenerateTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated token
          schema:
            $ref: '#/definitions/response.Data-dto_GenerateTokenResponse'
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/errs.Error'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/errs.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Generate authentication token
      tags:
      - Authentication
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/response.Data-dto_CreateUserResponse'
        "422":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/errs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Create user
      tags:
      - Users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Finds an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully found user
          schema:
            $ref: '#/definitions/response.Data-dto_FindUserResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/errs.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - BearerAuth: []
      summary: Find user
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates an existing user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/errs.Error'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/errs.Error'
        "422":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/errs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Error'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
  /api/v1/users/activate:
    post:
      consumes:
      - application/json
      description: Activates an existing user
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ActivateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Successfully activated user
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/errs.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/errs.Error'
      summary: Activate user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Enter your bearer token in the format **Bearer <token>**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
